plugins {
    id 'java'
    id 'org.springframework.boot' version '3.3.1'
    id 'io.spring.dependency-management' version '1.1.5'
}

group = 'com.kolosov'
version = '0.0.1-SNAPSHOT'

java {
    sourceCompatibility = '21'
}

configurations {
    compileOnly {
        extendsFrom annotationProcessor
    }
}

repositories {
    mavenCentral()
    maven {
        url = "s3://piratovi-artifacts" // Your S3 bucket URL
        authentication {
            awsIm(AwsImAuthentication)
        }
        content {
            includeGroupByRegex "com\\.kolosov\$"
        }
    }
    maven { url 'https://repo.spring.io/milestone' }
    maven { url 'https://repo.spring.io/snapshot' }
}

ext {
    set('springAiVersion', "1.0.0-SNAPSHOT")
    springShellVersion = "3.3.0"
}

dependencies {
    implementation platform("org.springframework.ai:spring-ai-bom:${springAiVersion}")
    implementation 'org.springframework.boot:spring-boot-starter-web'
    implementation 'org.springframework.ai:spring-ai-openai-spring-boot-starter'
    implementation 'org.springframework.shell:spring-shell-starter'
    implementation 'org.springframework.ai:spring-ai-pgvector-store-spring-boot-starter'
    implementation 'org.springframework.ai:spring-ai-ollama-spring-boot-starter'
    implementation 'org.springframework.boot:spring-boot-starter-data-jpa'
    compileOnly 'org.projectlombok:lombok'
    developmentOnly 'org.springframework.boot:spring-boot-devtools'
    implementation 'com.fasterxml.jackson.datatype:jackson-datatype-jsr310'
    implementation 'org.springframework.ai:spring-ai-pdf-document-reader'
    implementation 'com.kolosov:open-meteo-sdk:0.0.5'

    annotationProcessor 'org.projectlombok:lombok'
    testImplementation 'org.springframework.boot:spring-boot-starter-test'
    runtimeOnly 'org.springframework.boot:spring-boot-docker-compose'
    testRuntimeOnly 'org.junit.platform:junit-platform-launcher'
}

dependencyManagement {
    imports {
        mavenBom "org.springframework.shell:spring-shell-dependencies:$springShellVersion"
    }
}

tasks.named('test') {
    useJUnitPlatform()
}

//download fresh Snapshot
configurations {
    implementation {
        resolutionStrategy {
            eachDependency { DependencyResolveDetails details ->
                if (details.requested.version.endsWith('-SNAPSHOT')) {
                    cacheDynamicVersionsFor 0, 'seconds'
                    cacheChangingModulesFor 0, 'seconds'
                }
            }
        }
    }
}
